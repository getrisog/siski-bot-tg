import logging

from telegram import Update
from telegram.ext import ContextTypes

from pencil_bot.config import GIF_URLS_FILE
from pencil_bot.gif_bot import GifBot

logger = logging.getLogger(__name__)

# Create bot instance
bot = GifBot()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /start command"""
    welcome_message = """
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Å–∏—Å—å–∫–æ–±–æ—Ç –ø–µ–Ω—Å–∏–ª.

üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {}
""".format(", ".join(bot.keywords))

    await update.message.reply_text(welcome_message)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /help command"""
    help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {}
üé¨ –î–æ—Å—Ç—É–ø–Ω—ã—Ö GIF-—Å—Å—ã–ª–æ–∫: {}

üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª—é–±—ã–º –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Å–ª—É—á–∞–π–Ω—É—é GIF-–∞–Ω–∏–º–∞—Ü–∏—é!
""".format(", ".join(bot.keywords), len(bot.gif_urls))

    await update.message.reply_text(help_text)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for all text messages"""
    if not update.message.text:
        return

    # Check for keywords
    found_keywords, found_siski = bot.check_keywords(update.message.text)

    if found_keywords:
        logger.info(f"Found keywords: {found_keywords}")

        # Get random GIF URL
        gif_url = bot.get_random_gif_url()
        if gif_url:
            try:
                # Download GIF
                gif_file = await bot.download_gif(gif_url)
                if gif_file:
                    # Form caption
                    caption = ""

                    # If "—Å–∏—Å—å–∫–∏" word found, add funny response
                    if found_siski:
                        caption += "üòè –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°–∏—Å—å–∫–∏ - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ —Ö–æ—Ä–æ—à–æ!"
                    else:
                        # If other keywords found, add funny response
                        caption += f"ü§™ –ù–µ {', '.join(found_keywords)}, –∞ —Å–∏—Å—å–∫–∏!"

                    # Send GIF
                    with open(gif_file, "rb") as gif:
                        await update.message.reply_animation(animation=gif, caption=caption)
                    logger.info(f"Sent GIF: {gif_url}")

                    # Delete temporary file
                    import os

                    os.unlink(gif_file)
                else:
                    await update.message.reply_text("‚ùå Error downloading GIF")
            except Exception as e:
                logger.error(f"Error sending GIF: {e}")
                await update.message.reply_text("‚ùå Error sending GIF")
        else:
            await update.message.reply_text("‚ùå No available GIF URLs")


async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /status command to check bot status"""
    status_text = f"""
üìä Bot status:

üîë Keywords: {len(bot.keywords)}
üé¨ Available GIF URLs: {len(bot.gif_urls)}
üìÇ GIF URLs file: {GIF_URLS_FILE}
"""
    await update.message.reply_text(status_text)


async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /test command to test bot functionality"""
    test_message = f"""
üß™ Bot test:

‚úÖ Bot is working
üé¨ Available GIF URLs: {len(bot.gif_urls)}
üîë Keywords: {", ".join(bot.keywords)}
üî§ Normalized keywords: {", ".join(bot.normalized_keywords)}
üí¨ Chat type: {update.effective_chat.type}
üë§ User: {update.effective_user.id if update.effective_user else "Unknown"}

üí° Bot now understands different word forms!
   For example: "–∫–æ—Ç—ã" -> "–∫–æ—Ç", "—Å–æ–±–∞–∫–∏" -> "—Å–æ–±–∞–∫–∞"
"""
    await update.message.reply_text(test_message)
